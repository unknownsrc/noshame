<!DOCTYPE html>
<html>
<head>
  <title>noshame</title>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
    }
    .submissions {
      width: 65%;
      margin-top: 100px;
    }
    textarea {
      width: 100%;
      height: 150px;
      box-sizing: border-box;
      display: block;
      font-size: 14px;
    }
    .action-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 10px;
    }
    .left-actions,
    .right-actions {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    input[type="file"] {
      max-width: 100%;
    }
    .draft {
      display: none;
    }
  </style>
</head>
<body>
  <form class="submissions" method="post" enctype="multipart/form-data">
    <textarea name="text" autofocus autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" required></textarea>
    <div class="action-row">
      <div class="left-actions">
        <input type="file" name="files" multiple>
      </div>
      <div class="right-actions">
        <% if (it.showPassword) { %>
          <input type="password" name="password" required placeholder="pgp key password"/>
        <% } %>
        <button class="draft">save draft</button>
        <button type="submit">submit</button>
      </div>
    </div>
  </div>
  <script>
    const draft = document.querySelector('.draft');
    const password = document.querySelector('input[name="password"]');
    const textArea = document.querySelector('textarea[name="text"]');
    draft.style.display = 'inline-block';

    const savedDraft = localStorage.getItem("draft");
    if (savedDraft) {
      const shoudLoad = confirm("You have a saved draft. Do you want to load it?") 
      if (!shoudLoad) {
        localStorage.removeItem("draft");
        alert('Draft cleared.');
      } else {
        const password = prompt("Please enter your PGP password.", "")
        if (!password) {
          alert('Draft loading cancelled.');
        } else {
          decrypt(savedDraft, password).then(decryptedText => {
            textArea.value = decryptedText;
          }).catch(err => {
            console.error('Failed to decrypt draft:', err);
            alert('Failed to load draft. Please check your password.');
          })
        }
      }
    }

    document.querySelector('.draft').addEventListener('click', async function (event) {
      event.preventDefault();
      if (!password.value) {
        alert('Please enter your PGP key password to save a draft.');
        return;
      }

      const text = textArea.value.trim();
      const encryptedText = await encrypt(text, password.value);
      localStorage.setItem("draft", encryptedText);
      alert('Draft saved successfully!');
    });

    async function encrypt(text, password) {
      const enc = new TextEncoder();
      const salt = crypto.getRandomValues(new Uint8Array(16));
      const iv = crypto.getRandomValues(new Uint8Array(12));
      const keyMaterial = await crypto.subtle.importKey(
        "raw", enc.encode(password), "PBKDF2", false, ["deriveKey"]
      );
      const key = await crypto.subtle.deriveKey({
        name: "PBKDF2",
        salt,
        iterations: 100000,
        hash: "SHA-256"
      }, keyMaterial, { name: "AES-GCM", length: 256 }, false, ["encrypt"]);

      const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, key, enc.encode(text));

      const full = new Uint8Array(salt.byteLength + iv.byteLength + encrypted.byteLength);
      full.set(salt);
      full.set(iv, salt.byteLength);
      full.set(new Uint8Array(encrypted), salt.byteLength + iv.byteLength);
      return btoa(String.fromCharCode(...full));
    }

    async function decrypt(encryptedBase64, password) {
      const data = Uint8Array.from(atob(encryptedBase64), c => c.charCodeAt(0));
      const salt = data.slice(0, 16);
      const iv = data.slice(16, 28);
      const encrypted = data.slice(28);

      const enc = new TextEncoder();
      const keyMaterial = await crypto.subtle.importKey(
        "raw", enc.encode(password), "PBKDF2", false, ["deriveKey"]
      );
      const key = await crypto.subtle.deriveKey({
        name: "PBKDF2",
        salt,
        iterations: 100000,
        hash: "SHA-256"
      }, keyMaterial, { name: "AES-GCM", length: 256 }, false, ["decrypt"]);

      const decrypted = await crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, encrypted);
      return new TextDecoder().decode(decrypted);
    }
  </script>
</body>
</html>
